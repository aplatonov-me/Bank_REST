openapi: 3.0.1
info:
  title: Bank Cards API
  description: "API for managing bank cards, users, and transactions"
  contact:
    name: Bank Cards Team
    email: support@example.com
  license:
    name: API License
    url: https://example.com/licenses
  version: v1.0
servers:
- url: http://localhost:8080/api
  description: Generated server url
security:
- Bearer Authentication: []
paths:
  /cards/status:
    put:
      tags:
      - card-controller
      operationId: updateCardStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCardStatusRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDto"
  /users/remove-role:
    post:
      tags:
      - users-controller
      operationId: assignRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveRoleRequest"
        required: true
      responses:
        "200":
          description: OK
  /users/assign-role:
    post:
      tags:
      - users-controller
      operationId: assignRole_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignRoleRequest"
        required: true
      responses:
        "200":
          description: OK
  /users/add:
    post:
      tags:
      - users-controller
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CreateUserResponse"
  /cards:
    get:
      tags:
      - card-controller
      operationId: getAllCards
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageCardDto"
    post:
      tags:
      - card-controller
      operationId: createCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCardRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDto"
  /cards/transfer:
    post:
      tags:
      - card-controller
      operationId: transferMoney
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRequest"
        required: true
      responses:
        "200":
          description: OK
  /auth/login:
    post:
      tags:
      - auth-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LoginResponse"
  /users/{id}:
    get:
      tags:
      - users-controller
      operationId: getUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GetUserResponse"
    delete:
      tags:
      - users-controller
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /users/paginated:
    get:
      tags:
      - users-controller
      operationId: getPaginatedUsers
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageListUsersResponse"
  /cards/{id}:
    get:
      tags:
      - card-controller
      operationId: getCard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDto"
    delete:
      tags:
      - card-controller
      operationId: deleteCard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /cards/my:
    get:
      tags:
      - card-controller
      operationId: getUserCards
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageCardDto"
components:
  schemas:
    UpdateCardStatusRequest:
      required:
      - cardId
      - status
      type: object
      properties:
        cardId:
          type: integer
          format: int64
        status:
          type: string
          enum:
          - ACTIVE
          - BLOCKED
          - EXPIRED
    CardDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        maskedNumber:
          type: string
        ownerUsername:
          type: string
        expirationDate:
          type: string
          format: date
        status:
          type: string
          enum:
          - ACTIVE
          - BLOCKED
          - EXPIRED
        balance:
          type: number
    RemoveRoleRequest:
      required:
      - role
      - userId
      type: object
      properties:
        role:
          type: string
          enum:
          - USER
          - ADMIN
        userId:
          type: integer
          format: int64
    AssignRoleRequest:
      required:
      - role
      - userId
      type: object
      properties:
        role:
          type: string
          enum:
          - USER
          - ADMIN
        userId:
          type: integer
          format: int64
    CreateUserRequest:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    CreateUserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
    CreateCardRequest:
      required:
      - initialBalance
      - userId
      type: object
      properties:
        userId:
          type: integer
          format: int64
        initialBalance:
          type: number
    TransferRequest:
      required:
      - amount
      - destinationCardId
      - sourceCardId
      type: object
      properties:
        sourceCardId:
          type: integer
          format: int64
        destinationCardId:
          type: integer
          format: int64
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
    LoginRequest:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        roles:
          type: array
          items:
            type: string
        token:
          type: string
    GetUserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        roles:
          type: array
          items:
            type: string
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    ListUsersResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
    PageListUsersResponse:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/ListUsersResponse"
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: "#/components/schemas/PageableObject"
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          type: array
          items:
            $ref: "#/components/schemas/SortObject"
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        direction:
          type: string
        nullHandling:
          type: string
        ascending:
          type: boolean
        property:
          type: string
        ignoreCase:
          type: boolean
    PageCardDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/CardDto"
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: "#/components/schemas/PageableObject"
        empty:
          type: boolean
  securitySchemes:
    Bearer Authentication:
      type: http
      scheme: bearer
      bearerFormat: JWT
